---
layout: post
title: "ES6"
date: 2018-07-09
categories:
  - ES6
description:
image: https://i.ytimg.com/vi/IEf1KAcK6A8/maxresdefault.jpg
image-sm: https://i.ytimg.com/vi/IEf1KAcK6A8/maxresdefault.jpg
---
<h3>ES6 Block Scope</h3>

사전에서의 정의 - Scope: 범위, 한도, 목적 등을 뜻함

기존의 ES5에서의 Scope는 function Scope 만이 존재했다.
Scope 라는 사전적 의미와 function(함수)을 조합 해보면 함수의 유효범위 쯤으로 해석 되는데 이보다는 함수에 의해 생성된 유효범위라고 하는게 더 잘 어울릴 것 같다.

이렇듯 ES5에서는 스코프를 함수에서만 지정할 수 있는데 ES6에서는 block Scope 라는 것이 새롭게 생겼다. block scope가 무엇인지 알아보도록 하자.

{
	let a = 10;
	{
		let a = 20;
		console.log(a);
	}
	console.log(a);
}
console.log(a);

여기서 { } 중괄호가 block scope이다.
ES5의 function scope 와 동일한 기능을 담당한다.

{
	let a = 10;
	{
		let a = 20;
		console.log(a); // a = 20;
	}
	console.log(a); // a = 10;
}
console.log(a); // a is not defined

이렇듯 중괄호 밖의 global scope 에서는 내부 block scope 안의 
let a 의 값을 찾을 수 없다. ES5 와 비교해 보도록하자.

(function() {
	var a = 10;
    (function() {
    	var a = 20;
        console.log(a); // a = 20;
    })();
    console.log(a); // a = 10;
})();
console.log(a); // a is not defined

block scope를 대신해서 위와 같이 function scope를 사용해서 es5 로
구성하였고 위 es6 코드와 동일하게 동작하는 것을 볼 수 있다.

이 것을 공부하면서 생긴 궁금증으로 var 과 let 을 섞어서 쓰면 어떻게 될 까? 였다.

{
	let a = 10;
    {
		let a = 20;
        var b = 20;
	}
	console.log(a);
    console.log(b);
}

당연한 것이지만 a = 10 을 출력하였고 var b 는 block scope 의 영향을 받지 않기 때문에 20을 출력하였다.

let a = 20;
var a = 20;

과 같은 식을 사용했다면 이미 선언된 식별자라며 에러를 출력한다.
